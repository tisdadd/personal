/** This file is automatically generated by src/ipc/generateIpcRegistrationScript.ts
*  Manual modifications will be overwritten.
*/
/* eslint-disable no-console */
import { contextBridge } from 'electron';
import editDataPreloadRegistration from './editData/editData.preloadRegistration';
import getDataPreloadRegistration from './getData/getData.preloadRegistration';
import onDataUpdatedPreloadRegistration from './onDataUpdated/onDataUpdated.preloadRegistration';
import pickFilePreloadRegistration from './pickFile/pickFile.preloadRegistration';
import resetDatabasePreloadRegistration from './resetDatabase/resetDatabase.preloadRegistration';

const ipcProcesses = {};
try {
  editDataPreloadRegistration(ipcProcesses);
} catch (e) {
  console.warn('registration failed', e.message);
}
try {
  getDataPreloadRegistration(ipcProcesses);
} catch (e) {
  console.warn('registration failed', e.message);
}
try {
  onDataUpdatedPreloadRegistration(ipcProcesses);
} catch (e) {
  console.warn('registration failed', e.message);
}
try {
  pickFilePreloadRegistration(ipcProcesses);
} catch (e) {
  console.warn('registration failed', e.message);
}
try {
  resetDatabasePreloadRegistration(ipcProcesses);
} catch (e) {
  console.warn('registration failed', e.message);
}
contextBridge.exposeInMainWorld('electronAPI', ipcProcesses);
